http://www.cnblogs.com/Jackc/archive/2009/02/24/1397433.html

1. 概述
 
黑盒测试用例设计方法包括等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱动法、正交试验设计法、功能图法等。 
2. 等价类划分法
 
2.1.              概念
等价类划分法是把程序的输入域划分成若干部分（子集），然后从每个部分中选取少数代表性数据作为测试用例。每一类的代表性数据在测试中的作用等价于这一类中的其他值。

2.2.              等价类划分法的应用
1.     等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试.因此,可以把全部输入数据合理划分为若干等价类,在每一个等价类中取一个数据作为测试的输入条件,就可以用少量代表性的测试数据.取得较好的测试结果.等价类划分可有两种不同的情况:有效等价类和无效等价类。

·      有效等价类:是指对于程序的规格说明来说是合理的,有意义的输入数据构成的集合.利用有效等价类可检验程序是否实现了规格说明中所规定的功能和性能。
·      无效等价类:与有效等价类的定义恰巧相反。
设计测试用例时,要同时考虑这两种等价类.因为,软件不仅要能接收合理的数据,也要能经受意外的考验.这样的测试才能确保软件具有更高的可靠性。
2.   划分等价类的六大原则：

·      在输入条件规定了取值范围或值的个数的情况下,则可以确立一个有效等价类和两个无效等价类.
例：输入值是学生成绩，范围是0～100：
·      在输入条件规定了输入值的集合或者规定了“必须如何”的条件的情况下,可确立一个有效等价类和一个无效等价类.
·      在输入条件是一个布尔量的情况下,可确定一个有效等价类和一个无效等价类. 布尔量是一个二值枚举类型, 一个布尔量具有两种状态: true 和 false 。
·      在规定了输入数据的一组值（假定n个）,并且程序要对每一个输入值分别处理的情况下,可确立n个有效等价类和一个无效等价类.
例：输入条件说明输入字符为:中文、英文、阿拉伯文三种之一，则分别取这三种这三个值作为三个有效等价类，另外把三种字符之外的任何字符作为无效等价类。
·      在规定了输入数据必须遵守的规则的情况下,可确立一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）
·      在确知已划分的等价类中各元素在程序处理中的方式不同的情况下,则应再将该等价类进一步的划分为更小的等价类
3.   将等价类转化成测试用例：

·         按照[输入条件][有效等价类][无效等价类] 建立等价类表,列出所有划分出的等价类
·      为每一个等价类规定一个唯一的编号.
·         设计一个新的测试用例,使其尽可能多地覆盖尚未被覆盖地有效等价类,重复这一步.直到所有的有效等价类都被覆盖为止.
·         设计一个新的测试用例,使其仅覆盖一个尚未被覆盖的无效等价类,重复这一步.直到所有的无效等价类都被覆盖为止.
 

2.3.              等价类划分实例
 
1.     某程序规定："输入三个整数 a 、 b 、 c 分别作为三边的边长构成三角形。通过程序判定所构成的三角形的类型，当此三角形为一般三角形、等腰三角形及等边三角形时，分别作计算 … "。用等价类划分方法为该程序进行测试用例设计。（三角形问题的复杂之处在于输入与输出之间的关系比较复杂。）
分析题目中给出和隐含的对输入条件的要求：
（1）整数    （2）三个数    （3）非零数   （4）正数   
（5）两边之和大于第三边     （6）等腰     （7）等边 
 如果 a 、 b 、 c 满足条件（ 1 ） ~ （ 4 ），则输出下列四种情况之一：
 1)如果不满足条件（5），则程序输出为 " 非三角形 " 。
 2)如果三条边相等即满足条件（7），则程序输出为 " 等边三角形 " 。
 3)如果只有两条边相等、即满足条件（6），则程序输出为 " 等腰三角形 " 。
 4)如果三条边都不相等，则程序输出为 " 一般三角形 " 。 
 列出等价类表并编号
 2.    设有一个档案管理系统，要求用户输入以年月表示的日期。假设日期限定在1990年1月~2049年12月，并规定日期由6位数字字符组成，前4位表示年，后2位表示月。现用等价类划分法设计测试用例，来测试程序的"日期检查功能"。（不考虑2月的问题）
1)划分等价类并编号,下表等价类划分的结果
2)设计测试用例，以便覆盖所有的有效等价类在表中列出了3个有效等价类，编号分别为①、⑤、⑧，设计的测试用例如下：

测试数据    期望结果      覆盖的有效等价类
200211      输入有效      ①、⑤、⑧
3)为每一个无效等价类设计一个测试用例，设计结果如下：
    测试数据   期望结果     覆盖的无效等价类
    95June     无效输入          ②
    20036      无效输入          ③
    2001006   无效输入          ④
    198912     无效输入          ⑥
    200401     无效输入          ⑦
    200100     无效输入          ⑨
    200113     无效输入          ⑩

3.     NextDate 函数包含三个变量：month 、 day 和 year ，函数的输出为输入日期后一天的日期。 例如，输入为 2006年3月 7日，则函数的输出为 2006年3月8日 。要求输入变量 month 、 day 和 year 均为整数值，并且满足下列条件：
  ①1≤month≤12
  ②1≤day≤31
  ③1920≤year≤2050  
1)有效等价类为：
    M1＝{月份：1≤月份≤12}
    D1＝{日期：1≤日期≤31}
    Y1＝{年：1812≤年≤2012}
2)若条件 ① ~ ③中任何一个条件失效，则 NextDate 函数都会产生一个输出，指明相应的变量超出取值范围，比如 "month 的值不在 1-12 范围当中 " 。显然还存在着大量的 year 、 month 、 day 的无效组合， NextDate 函数将这些组合作统一的输出： " 无效输入日期 " 。其无效等价类为：
    M2＝{月份：月份<1}
    M3＝{月份：月份>12}
    D2＝{日期：日期<1}
    D3＝{日期：日期>31}
    Y2＝{年：年<1812}
    Y3＝{年：年>2012}
  弱一般等价类测试用例
  月份    日期       年               预期输出
   6       15        1912           1912年6月16日
  强一般等价类测试用例同弱一般等价类测试用例
  注：弱--有单缺陷假设；健壮--考虑了无效值 
  
  (一)弱健壮等价类测试
  用例ID   月份  日期    年          预期输出
  WR1      6      15    1912      1912年6月16日
  WR2     -1     15    1912      月份不在1～12中
  WR3     13     15    1912      月份不在1～12中
  WR4      6      -1    1912      日期不在1～31中
  WR5      6      32    1912      日期不在1～31中
  WR6      6      15    1811      年份不在1812～2012中
  WR7      6      15    2013      年份不在1812～2012中

  (二)强健壮等价类测试
          用例ID   月份    日期      年          预期输出
          SR1       -1      15       1912      月份不在1～12中
          SR2        6      -1        1912      日期不在1～31中
          SR3        6      15       1811      年份不在1812～2012中
          SR4       -1      -1       1912      两个无效一个有效
          SR5        6      -1        1811      两个无效一个有效
          SR6       -1      15       1811      两个无效一个有效
          SR7       -1      -1       1811      三个无效

4.     佣金问题等价类测试用例，它是根据佣金函数的输出值域定义等价类，来改进测试用例集合。
输出销售额≤1000元     佣金10％
1000<销售额≤1800     佣金=100+(销售额-1000)*15%
销售额>1800              佣金=220+(销售额-1800)*20%
测试用例         枪机(45)    枪托(30)      枪管(25)          销售额     佣金
    1               5             5                5                  500        50
    2              15           15              15                 1500       175
    3              25           25              25                 2500       360
根据输出域选择输入值，使落在输出域等价类内，可以结合弱健壮测试用例结合。 

 
 

 
3. 边界值分析法
 
3.1.              概念
 
边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。 
3.2.              边界值分析法的应用
 
根据大量的测试统计数据，很多错误是发生在输入或输出范围的边界上，而不是发生在输入/输出范围的中间区域。因此针对各种边界情况设计测试用例，可以查出更多的错误。

使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。

1.     边界值分析法与等价类分析法的区别：
1)    边界值分析不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。
2)    边界值分析不仅考虑输入条件，还要考虑输出空间产生的测试情况。
例：测试计算平方根的函数
--输入：实数
--输出：实数
--需求说明：当输入一个0或比0大的数的时候，返回其正平方根；当输入一个小于0的数时，显示错误信息"平方根非法-输入值小于0"并返回0；库函数Print-Line可以用来输出错误信息。
A.    等价类划分：
            I.可以考虑作出如下划分：
                        a、输入 (i)<0 和 (ii)>=0
                        b、输出 (a)>=0 和 (b) Error
            II.测试用例有两个：
                        a、输入4，输出2。对应于 (ii) 和 (a) 。
                        b、输入-10，输出0和错误提示。对应于 (i) 和 (b) 。
B.     边界值分析：
划分(ii)的边界为0和最大正实数；划分(i)的边界为最小负实数和0。由此得到以下测试用例：
                        a、输入 {最小负实数}
                        b、输入 {绝对值很小的负数}
                        c、输入 0
                        d、输入 {绝对值很小的正数}
                        e、输入 {最大正实数}

2.     通常情况下，软件测试所包含的边界检验有几种类型：数字、字符、位置、重量、大小、速度、方位、尺寸、空间等。

3.     相应地，以上类型的边界值应该在：最大/最小、首位/末位、上/下、最快/最慢、最高/最低、  最短/最长、 空/满等情况下。利用边界值作为测试数据
4.     内部边界值分析：
    在多数情况下，边界值条件是基于应用程序的功能设计而需要考虑的因素，可以从软件的规格说明或常识中得到，也是最终用户可以很容易发现问题的。然而，在测试用例设计过程中，某些边界值条件是不需要呈现给用户的，或者说用户是很难注意到的，但同时确实属于检验范畴内的边界条件，称为内部边界值条件或子边界值条件。
    内部边界值条件主要有下面几种：
1)    数值的边界值检验：计算机是基于二进制进行工作的，因此，软件的任何数值运算都有一定的范围限制。
2)    字符的边界值检验：在计算机软件中，字符也是很重要的表示元素，其中ASCII和Unicode是常见的编码方式。如下列出了一些常用字符对应的ASCII码值。
3)     其它边界值检验：在不同的行业应用领域，依据硬件和软件的标准不同而具有各自特定的边界值。如下列出部分手机相关的边界值：
硬件设备
5.     基于边界值分析方法选择测试用例的原则
1)    如果输入条件规定了值的范围,则应取刚达到这个范围的边界的值,以及刚刚超越这个范围边界的值作为测试输入数据。
Ø  例如，如果程序的规格说明中规定："重量在10公斤至50公斤范围内的邮件，其邮费计算公式为……"。作为测试用例，我们应取10及50，还应取10.01,49.99,9.99及50.01等。
2)    如果输入条件规定了值的个数,则用最大个数,最小个数,比最小个数少一,比最大个数多一的数作为测试数据。
Ø  例如，一个输入文件应包括1~255个记录，则测试用例可取1和255，还应取0及256等。
3)    将规则1）和2）应用于输出条件，即设计测试用例使输出值达到边界值及其左右的值。
Ø  例如，某程序的规格说明要求计算出"每月保险金扣除额为0至1165.25元"，其测试用例可取0.00及1165.24、还可取一0.01及1165．26等。
Ø  再如一程序属于情报检索系统，要求每次"最少显示1条、最多显示4条情报摘要"，这时我们应考虑的测试用例包括1和4，还应包括0和5等。
4)    如果程序的规格说明给出的输入域或输出域是有序集合,则应选取集合的第一个元素和最后一个元素作为测试用例。
5)    如果程序中使用了一个内部数据结构,则应当选择这个内部数据结构的边界上的值作为测试用例。
6)    分析规格说明,找出其它可能的边界条件。
 
3.3.              实例
 
1.     现有一个学生标准化考试批阅试卷,产生成绩报告的程序。其规格说明如下:程序的输入文件由一些有80个字符的记录组成,如右图所示，所有记录分为3组：

1)    标题：这一组只有一个记录，其内容为输出成绩报告的名字。
2)    试卷各题标准答案记录：每个记录均在第80个字符处标以数字"2"。该组的第一个记录的第1至第3个字符为题目编号（取值为1一999）。第10至第59个字符给出第1至第50题的答案（每个合法字符表示一个答案）。该组的第2，第3……个记录相应为第51至第100，第101至第150，…题的答案。
3)    每个学生的答卷描述：该组中每个记录的第80个字符均为数字"3"。每个学生的答卷在若干个记录中给出。如甲的首记录第1至第9字符给出学生姓名及学号，第10至第59字符列出的是甲所做的第1至第50题的答案。若试题数超过50，则第2，第3……纪录分别给出他的第51至第100，第101至第150……题的解答。然后是学生乙的答卷记录。
4)    学生人数不超过200，试题数不超过999。
5)    程序的输出有4个报告：
    a)按学号排列的成绩单，列出每个学生的成绩、名次。
    b)按学生成绩排序的成绩单。
    c)平均分数及标准偏差的报告。
    d)试题分析报告。按试题号排序，列出各题学生答对的百分比。
解答：分别考虑输入条件和输出条件，以及边界条件。给出下表所示的输入条件及相应的测试用例。
4. 错误推断法
 
4.1.              概念
 
  基于经验和直觉推测程序中所有可能存在的各种错误, 从而有针对性的设计测试用例的方法。
4.2.              错误推断法的应用
 
  基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况,根据他们选择测试用例。
1.     例如, 输入数据和输出数据为0的情况；输入表格为空格或输入表格只有一行。 这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。
2.     例如，前面例子中成绩报告的程序，采用错误推测法还可补充设计一些测试用例：
1)     程序是否把空格作为回答
2)     在回答记录中混有标准答案记录
3)     除了标题记录外，还有一些的记录最后一个字符即不是2也不是3
4)     有两个学生的学号相同
5)     试题数是负数
3.     例如，测试一个对线性表（比如数组）进行排序的程序，可推测列出以下几项需要特别测试的情况：
1)    输入的线性表为空表；
2)    表中只含有一个元素；
3)    输入表中所有元素已排好序；
4)    输入表已按逆序排好；
5)    输入表中部分或全部元素相同。
4.     例如，测试手机终端的通话功能，可以设计各种通话失败的情况来补充测试用例：
1)    无SIM 卡插入时进行呼出（非紧急呼叫）
2)    插入已欠费SIM卡进行呼出
3)    射频器件损坏或无信号区域插入有效SIM卡呼出
4)    网络正常，插入有效SIM卡，呼出无效号码（如1、888、333333、不输入任何号码等）
5)    网络正常，插入有效SIM卡，使用“快速拨号”功能呼出设置无效号码的数字
 
 
 
 
 

5. 因果图法
 
5.1.              概念
 
因果图法是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。
5.2.              因果图法的应用
 
等价类划分法和边界值分析方法都是着重考虑输入条件，但没有考虑输入条件的各种组合、输入条件之间的相互制约关系。这样虽然各种输入条件可能出错的情况已经测试到了，但多个输入条件组合起来可能出错的情况却被忽视了。

如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、相应产生多个动作的形式来进行测试用例的设计，这就需要利用因果图（逻辑模型）。
